Index: client/src/components/folder/folder.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PopoverOption from \"../popover/popover\";\nimport PopoverPublic from \"../popoverpublic/popoverpublic\";\nimport PreviewModal from \"../preview/preview\";\n\nfunction Folder(props) {\n    const [imageSharedBy, setImageSharedBy] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n\n        if(props.file.shared_by_id) {\n            fetch(props.url+'/api/image/'+props.file.shared_profile_picture)\n                .then((res) => res.blob())\n                .then((blob) => {\n                    setImageSharedBy(URL.createObjectURL(blob));\n                    setIsLoading(false);\n                })\n        }\n    }, [props.file.name, props.path]);\n\n    return (\n        <div className='div-component-file'>\n                <div className='parent-directory-button-div'>\n                    {\n                        props.isPublic == false ? <Link className='link'>\n                                <div className='content-clickable-directory' onClick={() => {\n                                    props.settingPath(props.path+'-'+props.file.name, props.file.password);\n                                }}>\n                                    {\n                                        props.file.password != null ? <img className='parent-directory-button-div-image' src='/assets/carpeta_candado.png'></img> :\n                                            <img className='parent-directory-button-div-image' src='/assets/carpeta.png'></img>\n                                    }\n                                    <span>{props.file.name}</span>\n                                </div>\n                            </Link> :\n                            <div className='content-clickable-directory' onClick={() => {\n                                props.setPath(props.path+'-'+props.file.name)\n                                // props.setDetails(props.path+'-'+props.file.name);\n                            }}>\n                                <img className='parent-directory-button-div-image' src='/assets/carpeta.png'></img>\n                                <span>{props.file.name}</span>\n                            </div>\n                    }\n\n                    {\n                        props.isPublic == false ?\n                            <PopoverOption sendModal={props.sendModal} renameModal={props.renameModal} showPass3={props.showPass3} url={props.url} renameModal={props.renameModal} file={props.file} type={'folder'} modalDelete={props.modalDelete} path={props.path} download={props.download}/>\n                            : <PopoverPublic url={props.url} file={props.file} type='folder' path={props.file.path} download={props.download}/>\n                    }\n                </div>\n            {\n                !isLoading && imageSharedBy ? <>\n\n                    {\n                        props.file.name != 'Compartido' ? <Link className='link-shared-by' to={'/profile/'+props.file.shared_by_id}>\n                            <div className='imagen-shared-by' >\n                                <span>Compartido por: </span>\n                                <img src={imageSharedBy}/>\n                                <span className='span-username'>{props.file.shared_username}</span>\n                            </div>\n                        </Link> : <>\n                            <Link to={'/profile/'+props.file.shared_by_id} className='link-shared-by'>\n                                <div className='imagen-shared-by' >\n                                    <span>Compartido por: </span>\n                                    <img src={imageSharedBy}/>\n                                    <span className='span-username'>{props.file.shared_username}</span>\n                                </div>\n                            </Link>\n                            <img src='/assets/chincheta.png' className='chincheta-absolute'/>\n                        </>\n                    }\n                </> : null\n            }\n        </div>\n    );\n}\n\nexport default Folder;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/components/folder/folder.js b/client/src/components/folder/folder.js
--- a/client/src/components/folder/folder.js	(revision 652fc140af344ef3dc01f7a8dba44adc000f0dd2)
+++ b/client/src/components/folder/folder.js	(date 1682580925968)
@@ -23,8 +23,7 @@
     return (
         <div className='div-component-file'>
                 <div className='parent-directory-button-div'>
-                    {
-                        props.isPublic == false ? <Link className='link'>
+                        <Link className='link'>
                                 <div className='content-clickable-directory' onClick={() => {
                                     props.settingPath(props.path+'-'+props.file.name, props.file.password);
                                 }}>
@@ -34,16 +33,7 @@
                                     }
                                     <span>{props.file.name}</span>
                                 </div>
-                            </Link> :
-                            <div className='content-clickable-directory' onClick={() => {
-                                props.setPath(props.path+'-'+props.file.name)
-                                // props.setDetails(props.path+'-'+props.file.name);
-                            }}>
-                                <img className='parent-directory-button-div-image' src='/assets/carpeta.png'></img>
-                                <span>{props.file.name}</span>
-                            </div>
-                    }
-
+                            </Link>
                     {
                         props.isPublic == false ?
                             <PopoverOption sendModal={props.sendModal} renameModal={props.renameModal} showPass3={props.showPass3} url={props.url} renameModal={props.renameModal} file={props.file} type={'folder'} modalDelete={props.modalDelete} path={props.path} download={props.download}/>
Index: client/src/components/home/Home.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import './Home.css';\nimport * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport Upload from '../upload/upload';\nimport CreateFolder from '../create-folder/create-folder';\nimport Delete from '../delete/delete';\nimport File from '../file/file';\nimport Grid from '@mui/material/Grid';\nimport PopoverOption from '../popover/popover';\nimport PopoverPublic from '../popoverpublic/popoverpublic';\nimport ModalPassword from '../modal-password/modal-password';\nimport Rename from '../rename/rename';\nimport Send from '../send/send';\nimport Folder from '../folder/folder';\nimport Alert from '@mui/material/Alert';\nimport CreateFile from '../create-file/create-file';\n\nfunction Home(props) {\n  const [files, setFiles] = useState([]);\n  const [showUpload, setShowUpload] = useState(false);\n  const [showCreateFolder, setShowCreateFolder] = useState(false);\n  const [showCreateFile, setShowCreateFile] = useState(false);\n  const [showDelete, setShowDelete] = useState(false);\n  const [fileDelete, setFileDelete] = useState(null);\n  const [type, setType] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showModalPassword, setShowModalPassword] = useState(false);\n  const [showModalPassword2, setShowModalPassword2] = useState(false);\n  const [showModalPassword3, setShowModalPassword3] = useState(false);\n  const [passwords, setPasswords] = useState('');\n  const [newPath, setNewPath] = useState('');\n  const [showRename, setShowRename] = useState(false);\n  const [fileRename, setFileRename] = useState(null);\n  const [typeRename, setTypeRename] = useState(null);\n  const [fileCanDownload, setFileCanDownload] = useState(null);\n  const [pathCanDownload, setPathCanDownload] = useState(null);\n  const [showSendModal, setShowSendModal] = useState(false);\n  const [fileSend, setFileSend] = useState(null);\n  const [typeSend, setTypeSend] = useState(null);\n  const [sendSuccess, setSendSuccess] = useState(false);\n  const [createFolderSuccess, setCreateFolderSuccess] = useState(false);\n  const [deleteSuccess, setDeleteSuccess] = useState(false);\n  const [renameSuccess, setRenameSuccess] = useState(false);\n  const [uploadSuccess, setUploadSuccess] = useState(false);\n  const [downloadSuccess, setDownloadSuccess] = useState(false);\n  const [createFileSuccess, setCreateFileSuccess] = useState(false);\n  const [notDirectoryState, setNotDirectoryState] = useState(false);\n\n    useEffect(() => {\n        getPath();\n    }, [props.path]);\n\n    function getPath() {\n        setFiles([]);\n        setIsLoading(true);\n        fetch(props.url + '/api/getPath/'+props.path)\n        .then(response => response.json())\n        .then(data => {\n            if(data.messageError) {\n                setNotDirectoryState(true);\n            } else {\n                let files = orderFiles(data.rows);\n                setFiles(files);\n                setIsLoading(false);\n            }\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n    }\n\n    function orderFiles(data) {\n        let filesOrdered = [];\n        let sharedFile = null;\n        data.forEach((file) => {\n            if (file.name === 'Compartido') {\n                sharedFile = file; // Si encontramos el archivo \"Compartido\", lo guardamos para añadirlo al principio del array después\n            } else if (file.name.includes('.')) {\n                filesOrdered.push(file);\n            } else {\n                filesOrdered.unshift(file);\n            }\n        });\n        if (sharedFile) {\n            filesOrdered.unshift(sharedFile); // Añadimos el archivo \"Compartido\" al principio del array\n        }\n        return filesOrdered;\n    }\n\n    function download(path, file, mode, type='file') {\n        if (type == 'folder') {\n            if(file.password) {\n                setPasswords(file.password);\n                setFileCanDownload(file);\n                setPathCanDownload(path);\n                setShowModalPassword2(true);\n            } else {\n                fetch(props.url+'/api/downloadFolder/'+path+'/'+file.name+'/'+mode, {\n                    method: 'GET',\n                    responseType: 'blob'\n                })\n                    .then((response) => {return response.blob()})\n                    .then((blob) => {\n                        const url = window.URL.createObjectURL(new Blob([blob]));\n                        const link = document.createElement('a');\n                        link.href = url;\n                        link.setAttribute('download', file.name + '.zip');\n                        document.body.appendChild(link);\n                        link.click();\n                        setDownloadSuccess(true);\n                        setTimeout(() => {setDownloadSuccess(false)}, 3000);\n                    })\n                    .catch((error) => {\n                        console.log(error);\n                    });\n            }\n        } else {\n            fetch(props.url+'/api/download/'+path+'/'+file.name, {\n                method: 'GET',\n                responseType: 'blob'\n            })\n                .then((response) => {return response.blob()})\n                .then((blob) => {\n                    const url = window.URL.createObjectURL(new Blob([blob]));\n                    const link = document.createElement('a');\n                    link.href = url;\n                    link.setAttribute('download', file.name);\n                    document.body.appendChild(link);\n                    link.click();\n                    setDownloadSuccess(true);\n                    setTimeout(() => {setDownloadSuccess(false)}, 3000);\n                }).catch((error) => {\n                console.log(error);\n            });\n        }\n    }\n\n    function modalDelete(file, type) {\n        setFileDelete(file);\n        setType(type)\n        setShowDelete(!showDelete);\n    }\n\n    function settingPath(path, password) {\n        if(password != null) {\n            setPasswords(password)\n            setNewPath(path);\n            setShowModalPassword(true);\n        } else {\n            props.setPath(path);\n        }\n    }\n\n    function renameModal(file, type) {\n        setFileRename(file);\n        setTypeRename(type);\n        setShowRename(!showRename);\n    }\n\n    function showPass3(file, type) {\n        setPasswords(file.password);\n        setShowModalPassword3(true);\n    }\n\n    function sendToModal(file, type) {\n        setFileSend(file);\n        setTypeSend(type);\n        setShowSendModal(!showSendModal);\n    }\n\n    if(isLoading && !notDirectoryState) {\n        return (\n            <div className='container-home'>\n                <div className='loading'>\n                    <img src='/assets/loading.gif'/>\n                </div>\n            </div>\n        )\n    }\n\n    if (notDirectoryState) {\n        return (\n            <div className='container-home'>\n                <div className='not-directory'>\n                    <h1>Error 404</h1>\n                    <img src='/assets/empty.png'/>\n                    <p>El directorio {props.path} no existe. Está intentando acceder a una carpeta que no está registrada en nuestro sistema vuelva atrás para continuar</p>\n                    <button className='btn btn-primary' onClick={() => {props.setPath(props.path.split('-').slice(0, -1).join('-'))}}>Volver atrás</button>\n                </div>\n            </div>\n        )\n    }\n\n  return (\n      <div className='container-home'>\n          {\n              props.isPublic == false ? <p className='path-home-show'>{props.path}</p> : ''\n          }\n          <div className='button-upload-no-buttons'>\n              {\n                  props.isPublic == false ?\n                      <>\n                          <button className='btn btn-upload' onClick={() => {\n                              setShowUpload(!showUpload)\n                          }}><img src='/assets/upload.png' className=\"logo-upload-button\"/></button>\n                          <button className='btn btn-upload' onClick={() => {\n                              setShowCreateFolder(!showCreateFolder)\n                          }}><img src='/assets/add-folder.png' className=\"logo-upload-button\"/></button>\n                          <button className='btn btn-upload' onClick={() => {\n                              setShowCreateFile(!showCreateFile)\n                          }}><img className='logo-upload-button' src='/assets/create-file.png'/></button>\n                      </> : ''\n              }\n          </div>\n          <div className='path-div'>\n              <Grid container spacing={2}>\n              {\n                  props.path.includes('-') ?\n                            props.isPublic == false ? <Grid item className='grid-item-home' xs={12} sm={6} md={4} lg={4} xl={4}><Link className='link' onClick={() => {\n                              props.setPath(props.path.split('-').slice(0, -1).join('-'))}\n                          }>\n                              <div className='parent-directory-button-div'>\n                                  <div className='content-clickable-directory'>\n                                      <img className='parent-directory-button-div-image' src='/assets/carpeta_padre.png'></img>\n                                      <span>Directorio anterior</span>\n                                  </div>\n                              </div>\n                                </Link></Grid> :\n                                <Grid item className='grid-item-home' xs={12} sm={6} md={4} lg={4} xl={4}>\n                              <div className='parent-directory-button-div' onClick={() => {\n                                  props.setPath(props.path.split('-').slice(0, -1).join('-'));\n                                  //quita el ultimo directorio del path\n                                    let pathArray = props.path.split('-');\n                                    pathArray.pop();\n                                    pathArray = pathArray.join('-');\n                                    props.setDetails(pathArray+'-');\n                              }}>\n                                  <div className='content-clickable-directory'>\n                                      <img className='parent-directory-button-div-image' src='/assets/carpeta_padre.png'></img>\n                                      <span>Directorio anterior</span>\n                                    </div>\n                              </div></Grid>\n                  : ''\n              }\n              {\n                  isLoading == false ?\n                      <>\n                          {\n                              files.length == 0 ? props.isPublic ? <div className='container-home'><div className='loading'>NO HAY ARCHIVOS PÚBLICOS</div></div> : <Grid item className='grid-item-home' xs={12} sm={6} md={4} lg={4} xl={4}>\n                                      <div className='parent-directory-button-div'>\n                                          <div className='content-clickable-directory'>\n                                              <img className='parent-directory-button-div-image' src='/assets/empty.png'></img>\n                                              <span>Directorio vacío</span>\n                                          </div>\n                                      </div>\n                                  </Grid> :\n                                  files.map((file, index) => {\n                                      if(props.isPublic == true && file.permissions == 0) {\n                                            return '';\n                                      }\n                                      if (file.type != 'folder') {\n                                          return (\n                                                <Grid item className='grid-item-home' xs={12} sm={6} md={4} lg={4} xl={4} key={index}>\n                                                    <File sendModal={sendToModal} renameModal={renameModal} showPass3={showPass3} isPublic={props.isPublic} url={props.url} file={file} path={props.path} modalDelete={modalDelete} download={download}></File>\n                                                </Grid>\n                                          )\n                                      } else {\n                                          return(\n                                                <Grid item className='grid-item-home' xs={12} sm={6} md={4} lg={4} xl={4} key={index}>\n                                                    <Folder download={download} setPath={props.setPath} sendModal={sendToModal} renameModal={renameModal} showPass3={showPass3}  isPublic={props.isPublic} url={props.url} file={file} path={props.path} modalDelete={modalDelete} settingPath={settingPath}></Folder>\n                                                </Grid>\n                                              )\n\n                                          }\n                                  })\n                            }\n                      </>\n                      : <div className='container-home'><div className='loading'>CARGANDO</div></div>\n              }\n                </Grid>\n          </div>\n\n          {/*MODALS*/}\n          {\n                showUpload ? <Upload levelUp={props.setLevelUp} newLevelUp={props.setNewLevelUp} success={setUploadSuccess} user={props.user} show={setShowUpload} path={props.path} url={props.url} reload={() => {\n                    setTimeout(() => {\n                        getPath();\n                    }, 500);\n                }}/> : ''\n          }\n          {\n                showCreateFolder ? <CreateFolder levelUp={props.levelUp} newLevelUp={props.newLevelUp} success={setCreateFolderSuccess} user={props.user} show={setShowCreateFolder} path={props.path} url={props.url} reload={getPath}/> : ''\n          }\n          {\n                showCreateFile ? <CreateFile levelUp={props.levelUp} newLevelUp={props.newLevelUp} success={setCreateFileSuccess} user={props.user} show={setShowCreateFile} path={props.path} url={props.url} reload={getPath}/> : ''\n          }\n          {\n                showDelete ? <Delete success={setDeleteSuccess} show={setShowDelete} type={type} file={fileDelete} path={props.path} url={props.url} reload={getPath}/> : ''\n          }\n          {\n              // Entrar al archivo\n              showModalPassword ? <ModalPassword newPath={newPath} setPath={props.setPath} show={setShowModalPassword} type={type} pass={passwords} path={props.path} url={props.url} reload={getPath}/> : ''\n          }\n          {\n              // Descargar el archivo\n              showModalPassword2 ? <ModalPassword canBeDownloaded={true} file={fileCanDownload} newPath={newPath} setPath={props.setPath} show={setShowModalPassword2} pathCanDownload={pathCanDownload} type={type} pass={passwords} path={props.path} url={props.url} reload={getPath}/> : ''\n          }\n          {\n              // Renombrar el archivo\n              showModalPassword3 ? <ModalPassword canBeEdit={true} showRename={setShowRename} file={fileRename} newPath={newPath} setPath={props.setPath} show={setShowModalPassword3} pathCanDownload={pathCanDownload} type={typeRename} pass={passwords} path={props.path} url={props.url} reload={getPath}/> : ''\n          }\n          {\n              showRename ? <Rename levelUp={props.levelUp} newLevelUp={props.newLevelUp} success={setRenameSuccess} show={setShowRename} type={typeRename} file={fileRename} path={props.path} url={props.url} reload={getPath} user={props.user}/> : ''\n          }\n          {\n              showSendModal ? <Send levelUp={props.levelUp} newLevelUp={props.newLevelUp} show={setShowSendModal} type={typeSend} success={setSendSuccess} file={fileSend} path={props.path} url={props.url} reload={getPath} user={props.user}/> : ''\n          }\n\n          {/*ALERTS*/}\n          {\n              sendSuccess ? <div className='alert-success'><Alert severity=\"success\">Enviado correctamente</Alert></div> : ''\n          }\n          {\n              createFolderSuccess ? <div className='alert-success'><Alert severity=\"success\">Creado correctamente</Alert></div> : ''\n          }\n          {\n              deleteSuccess ? <div className='alert-success'><Alert severity=\"success\">Eliminado correctamente</Alert></div> : ''\n          }\n          {\n              renameSuccess ? <div className='alert-success'><Alert severity=\"success\">Renombrado correctamente</Alert></div> : ''\n          }\n          {\n              uploadSuccess ? <div className='alert-success'><Alert severity=\"success\">Subido correctamente</Alert></div> : ''\n          }\n          {\n              downloadSuccess ? <div className='alert-success'><Alert severity=\"success\">Descargado correctamente</Alert></div> : ''\n          }\n          {\n              createFileSuccess ? <div className='alert-success'><Alert severity=\"success\">Creado correctamente</Alert></div> : ''\n          }\n          {\n              props.levelUp == false ? <div className='alert-success'><Alert severity=\"success\">¡Enhorabuena has subido al nivel {props.newLevelUp}!</Alert></div> : ''\n          }\n    </div>\n  );\n}\n\nexport default Home;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/client/src/components/home/Home.js b/client/src/components/home/Home.js
--- a/client/src/components/home/Home.js	(revision 652fc140af344ef3dc01f7a8dba44adc000f0dd2)
+++ b/client/src/components/home/Home.js	(date 1682581051217)
@@ -143,6 +143,7 @@
     }
 
     function settingPath(path, password) {
+        console.log({path, password});
         if(password != null) {
             setPasswords(password)
             setNewPath(path);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"32894c48-c79d-4576-8a77-14a1ae9a8670\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/client/.firebase/hosting.YnVpbGQ.cache\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client/.firebase/hosting.YnVpbGQ.cache\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/client/src/App.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client/src/App.js\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/client/src/components/upload/upload.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client/src/components/upload/upload.js\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server/private_cloud.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server/private_cloud.js\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"JavaScript File\" />\n        <option value=\"CSS File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"ProjectId\" id=\"2OJd1AZue7xvI7gfYKRDbcoIL8X\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/client/public/assets\" />\n    <property name=\"list.type.of.created.stylesheet\" value=\"CSS\" />\n    <property name=\"node.js.detected.package.eslint\" value=\"true\" />\n    <property name=\"node.js.selected.package.eslint\" value=\"(autodetect)\" />\n    <property name=\"node.js.selected.package.tslint\" value=\"(autodetect)\" />\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\n    <property name=\"vue.rearranger.settings.migration\" value=\"true\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/client/public/assets\" />\n      <recent name=\"$PROJECT_DIR$/client/public\" />\n      <recent name=\"$PROJECT_DIR$/server/uploads\" />\n      <recent name=\"$PROJECT_DIR$/client/src/components\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/client/public/assets\" />\n      <recent name=\"$PROJECT_DIR$/server/sql\" />\n    </key>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"32894c48-c79d-4576-8a77-14a1ae9a8670\" name=\"Changes\" comment=\"\" />\n      <created>1681282403419</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1681282403419</updated>\n      <workItem from=\"1681282405168\" duration=\"13959000\" />\n      <workItem from=\"1681365777355\" duration=\"13004000\" />\n      <workItem from=\"1681711992702\" duration=\"20839000\" />\n      <workItem from=\"1681799158693\" duration=\"20798000\" />\n      <workItem from=\"1681884802609\" duration=\"14222000\" />\n      <workItem from=\"1681971232020\" duration=\"19127000\" />\n      <workItem from=\"1682316478065\" duration=\"11558000\" />\n      <workItem from=\"1682337541520\" duration=\"2462000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 652fc140af344ef3dc01f7a8dba44adc000f0dd2)
+++ b/.idea/workspace.xml	(date 1682581051357)
@@ -6,10 +6,8 @@
   <component name="ChangeListManager">
     <list default="true" id="32894c48-c79d-4576-8a77-14a1ae9a8670" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/client/.firebase/hosting.YnVpbGQ.cache" beforeDir="false" afterPath="$PROJECT_DIR$/client/.firebase/hosting.YnVpbGQ.cache" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/client/src/App.js" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/App.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/client/src/components/upload/upload.js" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/components/upload/upload.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/server/private_cloud.js" beforeDir="false" afterPath="$PROJECT_DIR$/server/private_cloud.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/components/folder/folder.js" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/components/folder/folder.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client/src/components/home/Home.js" beforeDir="false" afterPath="$PROJECT_DIR$/client/src/components/home/Home.js" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -88,6 +86,7 @@
       <workItem from="1681971232020" duration="19127000" />
       <workItem from="1682316478065" duration="11558000" />
       <workItem from="1682337541520" duration="2462000" />
+      <workItem from="1682580710698" duration="341000" />
     </task>
     <servers />
   </component>
